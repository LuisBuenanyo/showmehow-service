[
    {
        "name": "intro",
        "desc": "Introduction",
        "available_to": ["shell", "console"],
        "entry": "hook",
        "practice": {
            "hook": {
                "input": "text",
                "mapper": ["input",
                    {
                        "type": "regex",
                        "value": ".*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Yes, I'm talking to you"
                    }
                }
            },
            "choice_see_cool": {
                "input": {
                    "type": "choice",
                    "settings": {
                        "yes": {
                            "text": "Sure, why not"
                        },
                        "no": {
                            "text": "Go away"
                        }
                    }
                },
                "mapper": ["input"],
                "effects": {
                    "yes": {
                        "reply": "Okay, here goes.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "gsettings set org.gnome.shell wobbly-effect true"
                            }
                        ]
                    },
                    "no": {
                        "reply": "You're boring! Sure you don't?"
                    }
                }
            },
            "goog_key": {
                "input": "text",
                "mapper": ["input",
                    {
                        "type": "regex",
                        "value": "Hfr gur Fbhepr, Yhxr"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Yes, I'm talking to you"
                    }
                }
            },
            "open_move_window": {
                "input": {
                    "type": "external_events",
                    "settings": {
                        "satisfied": {
                            "events": [
                                "window-moved"
                            ],
                            "notify": true,
                            "subsumes": [
                                "unsatisfied"
                            ]
                        },
                        "unsatisfied": {
                            "events": [
                            ],
                            "notify": false,
                            "subsumes": [
                            ]
                        }
                    }
                },
                "mapper": ["check_external_events"],
                "effects": {
                    "satisfied": {
                        "reply": "Things are not as they seem around here.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "gsettings set org.gnome.shell wobbly-effect false"
                            }
                        ]
                    },
                    "unsatisfied": {
                        "reply": "Move a window before coming back here!"
                    }
                }
            },
            "change_background_pic": {
                "input": "text",
                "mapper": ["input",
                  {
                    "type": "regex",
                    "value": "newsplash"
                  }
                ],
                "effects": {
                    "success": {
                        "reply": "Did you notice anything change on your desktop?",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "gsettings set org.gnome.desktop.background picture-uri file://${CODING_FILES_DIR}/background_pic.jpg"
                            }
                        ],
                        "move_to": "explore_shared_account"
                    }
                }
            },
            "explore_shared_account": {
                "task": "Get ready for your next clue.",
                "input": "text",
                "mapper": ["input",
                  {
                    "type": "regex",
                    "value": ".*"
                  }
                ],
                "effects": {
                    "success": {
                        "reply": "Login to the shared account to find out more. There should be a file called test.txt, which contains more clues.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "pkexec ${CODING_SHARED_SCRIPT_DIR} test.txt"
                            }
                        ]
                    }
                }
            },
            "explore_shared_account": {
                "task": "Get ready for your next clue.",
                "input": "text",
                "mapper": ["input",
                  {
                    "type": "regex",
                    "value": ".*"
                  }
                ],
                "effects": {
                    "success": {
                        "reply": "Login to the shared account to find out more. There should be a file called test.txt, which contains more clues.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "pkexec ${CODING_SHARED_SCRIPT_DIR} test.txt"
                            }
                        ]
                    }
                }
            },
            "install_programming_hook": {
                "input": "console",
                "mapper": [
                    "input",
                    {
                        "type": "regex",
                        "value": "^install\\-programming$"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Buckle up Dorothy, because Kansas is going bye-bye!\nSee you in the 'Coding Fun' app on your desktop!",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "echo 'Would install Programming App'"
                            },
                            {
                                "type": "unlock",
                                "value": ["showmehow"]
                            }
                        ]
                    },
                    "failure": {
                        "reply": "'install-programming' EXACTLY. I haven't got all day!"
                    }
                }
            },
            "intro-complete" : {
                "task": "Buckle up Dorothy, because Kansas is going bye-bye!\nSee you in the 'Coding Fun' app on your desktop!"
            }
        }
    },
    {
        "name": "showmehow",
        "desc": "Show me how to do things in this mysterious environment...",
        "available_to": ["console"],
        "entry": "showmehow",
        "practice": {
            "showmehow": {
                "input": "console",
                "mapper": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    },
                    {
                        "type": "regex",
                        "value": "Hey.*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "That's right! Though now you need to tell showmehow what task you want to try. This is called an 'argument'. Try giving showmehow an argument so that it knows what to do. Want to know what argument to give it? There's only one, and it just told you what it was."
                    },
                    "failure": {
                        "reply": "Nope, that wasn't what I thought would happen! Try typing just 'showmehow' and hit 'enter'. No more, no less (though surrounding spaces are okay).",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "ln ${CODING_FILES_DIR}/sw.txt ${HOME}/sw.txt"
                            }
                        ]
                    }
                }
            },
            "showmehow_argument": {
                "input": "console",
                "mapper": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    },
                    "wait_message",
                    "wrapped_output",
                    {
                        "type": "regex",
                        "value": "'showmehow' is a command.*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Great! Now that we're done with that, maybe you can run 'showmehow' again to find out what other things you can do in this mysterious place....",
                        "side_effects": [
                            {
                                "type": "unlock",
                                "value": ["joke", "readfile"]
                            }
                        ]

                    },
                    "failure": {
                        "reply": "Hmmm. I want to know what happens when you ask how to use 'showmehow'"
                    }
                }
            }
        }
    },
    {
        "name": "joke",
        "available_to": ["console"],
        "desc": "Tell me a joke",
        "entry": "fortune",
        "practice": {
            "fortune": {
                "input": "console",
                "mapper": ["shell",  "wait_message", "wrapped_output", {
                    "type": "regex",
                    "value": ".+"
                }],
                "effects": {
                    "success": {
                        "reply": "Ha-ha. Okay, lets try something even funnier."
                    },
                    "failure": {
                        "reply": "No?"
                    }
                }
            },
            "fortune_cowsay": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "^.*_.*$"
                }],
                "effects": {
                    "success": {
                        "reply": "Moo! Try some more jokes in the shell!"
                    },
                    "failure": {
                        "reply": "Hmm, I thought a cow was going to say that"
                    }
                }
            }
        }
    },
    {
        "name": "readfile",
        "available_to": ["console"],
        "desc": "Read a file",
        "entry": "cat",
        "practice": {
            "cat": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": "NAME=.*"
                }],
                "effects": {
                    "success":{
                        "reply": "Endless OS, as expected. Meow!"
                    },
                    "failure": {
                        "reply": "Hmm, are you sure you're reading /etc/os-release?"
                    }
                }
            },
            "cat_cowsay": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": "^.*_.*$"
                }],
                "effects": {
                    "success": {
                        "reply": "Moo! You can read any file that is plain text using `cat`. Try it with files like /etc/resolv.conf",
                        "side_effects": [
                            {
                                "type": "unlock",
                                "value": ["breakit"]
                            }
                        ]
                    },
                    "failure": {
                        "reply": "Did you get a cow to say what's in /etc/os-release? Try again"
                    }
                }
            }
        }
    },
    {
        "name": "breakit",
        "available_to": ["console"],
        "desc": "See how it is almost impossible to break anything",
        "entry": "breakit",
        "practice": {
            "breakit": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*command.*"
                }],
                "effects": {
                    "success": {
                        "reply": "See? Harmless. Don't be afraid to try new things!",
                        "side_effects": [
                            {
                                "type": "unlock",
                                "value": ["changesetting", "playsong"]
                            }
                        ]
                    },
                    "failure": {
                        "reply": "Oops, you actually ended up running something!"
                    }
                }
            }
        }
    },
    {
        "name": "changesetting",
        "available_to": ["console"],
        "desc": "Escape the terminal and tweak the OS",
        "entry": "gsettings",
        "practice": {
            "gsettings": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*Usage.*"
                }],
                "effects": {
                    "success": {
                        "reply": "The `gsettings` tool just told you about a bunch of `commands`. You can access these commands by providing the command name as an argument to `gsettings`."
                    },
                    "failure": {
                        "reply": "I thought that you were going to run `gsettings`?"
                    }
                }
            },
            "list_schemas": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": "org.*"
                }],
                "effects": {
                    "success": {
                        "reply": "Those are all the categories. Now lets look at settings you can tweak in your shell."
                    },
                    "failure": {
                        "reply": "Where are my settings categories? Try running the list-schemas subcommand for gsettings"
                    }
                }
            },
            "list_keys_help": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*Usage.*"
                }],
                "effects": {
                    "success": {
                        "reply": "Okay, so gsettings [--schemadir SCHEMADIR] list-keys SCHEMA[:PATH] is how you do it"
                    },
                    "failure": {
                        "reply": "I don't know how to use this list-keys option! Get me some help for it!"
                    }
                }
            },
            "list_settings": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": "^always-show-log-out$"
                }],
                "effects": {
                    "success": {
                        "reply": "Interesting.... I wonder what we can play around with here..."
                    },
                    "failure": {
                        "reply": "I want to know about the settings available for org.gnome.shell in sorted order? Can you list-schemas on org.gnome.shell using gsettings and then pipe (|) the output to `sort`?"
                    }
                }
            },
            "disable_social_bar": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "shell_custom",
                    "value": {
                        "command": "gsettings get org.gnome.shell enable-social-bar"
                    }
                }, {
                    "type": "regex",
                    "value": "false"
                }],
                "effects": {
                    "success": {
                        "reply": "There we go! No facebook icon!"
                    },
                    "failure": {
                        "reply": "Hmm, I thought you'd change the value of org.gnome.shell enable-social-bar to false, but it is still true"
                    }
                }
            },
            "enable_social_bar": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "shell_custom",
                    "value": {
                        "command": "gsettings get org.gnome.shell enable-social-bar"
                    }
                }, {
                    "type": "regex",
                    "value": "true"
                }],
                "effects": {
                    "success": {
                        "reply": "Okay, phew, facebook is back"
                    },
                    "failure": {
                        "reply": "Quick! I need facebook to come back! Change enable-social-bar on org.gnome.shell back to 'true'!"
                    }
                }
            },
            "add_terminal_pinned_help": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".+"
                }],
                "effects": {
                    "success": {
                        "reply": "Okay, so it is a list in square brackets, where every element is surrounded by quotation marks and separated by a comma. Just like this: ['chromium-browser.desktop', 'my-other-app.desktop']"
                    },
                    "failure": {
                        "reply": "You didn't show me your pinned apps!"
                    }
                }
            },
            "add_terminal_pinned": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "shell_custom",
                    "value": {
                        "command": "gsettings get org.gnome.shell taskbar-pins"
                    }
                }, {
                    "type": "regex",
                    "value": ".*org.gnome.Terminal.*"
                }],
                "effects": {
                    "success": {
                        "reply": "Sweet, looks like I'll be sticking around!"
                    },
                    "failure": {
                        "reply": "I'm not there :( The Terminal's App ID is 'org.gnome.Terminal', so we should add the 'org.gnome.Terminal.desktop' entry to that list in taskbar-pins"
                    }
                }
            }
        }
    },
    {
        "name": "playsong",
        "available_to": ["console"],
        "desc": "Play some music",
        "entry": "playsong",
        "practice": {
            "playsong": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*"
                }],
                "effects": {
                    "success": {
                        "reply": "I love this song! Now you'll probably notice that we're stuck here. To get out of any command line application, you can use Control-C"
                    },
                    "failure": {
                        "reply": "We need this song to get things into the right mood. Can you play it?"
                    }
                }
            }
        }
    },
    {
        "name": "navigation",
        "available_to": ["console"],
        "desc": "Learn to navigate the filesystem",
        "entry": "list",
        "practice": {
            "list": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*boot.*"
                }]
            },
            "list": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*boot.*"
                }]
            },
            "list_child": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*smspillaz.*"
                }]
            },
            "pwd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "\/"
                }]
            },
            "cd_and_cmd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*smspillaz.*"
                }]
            },
            "cd_home_and_cmd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*Pictures.*"
                }]
            },
            "mkdir": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "check_dir_exists",
                    "value": "~/code"
                }]
            },
            "touch": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "check_file_exists",
                    "value": "~/code/secret.txt"
                }]
            },
            "write_to_secret": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "check_file_contents",
                    "value": {
                        "path": "~/code/secret.txt",
                        "value": "kittens"
                    }
                }]
            }
        }
    }
]
